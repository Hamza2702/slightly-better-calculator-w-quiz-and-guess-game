using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Calculator_test
{
    internal class Program
    {
        // Operator choices

        public static int MultipleChoice(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 13; // Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta; // Change the colour to anything you like

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // Yes or No choices

        public static int MultipleChoice2(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 22; // Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta;

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // If number is 0 choices

        public static int MultipleChoice3(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 20; // Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta;

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // Divided by 0 change number choice.

        public static int MultipleChoice4(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 17;// Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta;

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // Operations

        public static void Operators(double num1, double num2, double result, int selectedClass)
        {
            switch (selectedClass)
            {
                case 1:
                    result = num1 + num2;
                    Console.WriteLine($"\nYour result\n {num1} + {num2} = {result}\n");
                    return;

                case 2:
                    result = num1 - num2;
                    Console.WriteLine($"\nYour result:\n {num1} - {num2} = {result}\n");
                    break;

                case 3:
                    result = num1 * num2;
                    Console.WriteLine($"\nYour result:\n {num1} * {num2} = {result}\n");
                    return;

                case 4:
                    if (num2 == 0)
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nYou cannot divide by zero!");
                        Console.ResetColor();
                        Console.WriteLine("Do you want to change the second number?");

                        int zeroClass = MultipleChoice3(true, "\tYes | Change the number", "\tNo | Close the program", "\tGo to Main Menu.");

                        switch (zeroClass)
                        {
                            case 1:
                                while (true)
                                {
                                    Console.ResetColor();
                                    Console.WriteLine("\nEnter number 2:");
                                    if (double.TryParse(Console.ReadLine(), out num2))
                                    {
                                        break;

                                    }
                                    else
                                    {
                                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                                        Console.WriteLine("Try entering a number.\n");
                                    }
                                }

                                Console.Clear();
                                Presentable(num1, num2);
                                Console.ForegroundColor = ConsoleColor.Green;
                                Operators(num1, num2, result, selectedClass);
                                Console.ResetColor();
                                return;
                            case 2:
                                // Exit program
                                Console.WriteLine("\nBye!\n");
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Write("Exiting the program in 5");
                                for (int i = 5; i >= 0; --i)
                                {
                                    Console.Write("\b");
                                    Console.Write($"{i}");
                                    Thread.Sleep(1000);
                                }
                                Environment.Exit(0);
                                return;
                            case 3:
                                // Main Menu
                                MainMenu();
                                return;
          
                        }
                        return;
                    }
                    result = num1 / num2;
                    Console.WriteLine($"\nYour result:\n {num1} / {num2} = {result}\n");
                    return;
                default:
                    Console.WriteLine("\nThat was not a valid option\n");
                    return;

            }
            return;
        }

        // Ending

        static void Ending(double x, int endClass)
        {
            switch (endClass)
            {
                case 1:
                    // Reset program
                    x = 6;
                    return;
                case 2:
                    // Exit program
                    Console.WriteLine("Bye!\n");
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.Write("Exiting the program in 5");
                    for (int i = 5; i >= 0; --i)
                    {
                        Console.Write("\b");
                        Console.Write($"{i}");
                        Thread.Sleep(1000);
                    }
                    Environment.Exit(0);
                    return;
                case 3:
                    MainMenu();
                    return;
            }
            return;
        }

        // Reset Console if user makes mistakes in input. for calculator

        static void Presentable(double num1,double num2)
        {
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.WriteLine(" _____       _            _       _             \r\n/  __ \\     | |          | |     | |            \r\n| /  \\/ __ _| | ___ _   _| | __ _| |_ ___  _ __ \r\n| |    / _` | |/ __| | | | |/ _` | __/ _ \\| '__|\r\n| \\__/\\ (_| | | (__| |_| | | (_| | || (_) | |   \r\n \\____/\\__,_|_|\\___|\\__,_|_|\\__,_|\\__\\___/|_|   \r\n  ");
            Console.ResetColor();


            Console.WriteLine("Enter number 1:");
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(num1);
            Console.ResetColor();
            Console.WriteLine("Enter number 2:");
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(num2);
            Console.ResetColor();
            return;
        }

        // Start | Choose guessing game or calculator

        public static int StartChoices(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 3;// Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta;

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // Calculator

        static void Calculator()
        {
            double x = 5;
            do
            {
                Console.Clear();

                double num1 = 0, num2 = 0, result = 0;
                string myText = " _____       _            _       _             \r\n/  __ \\     | |          | |     | |            \r\n| /  \\/ __ _| | ___ _   _| | __ _| |_ ___  _ __ \r\n| |    / _` | |/ __| | | | |/ _` | __/ _ \\| '__|\r\n| \\__/\\ (_| | | (__| |_| | | (_| | || (_) | |   \r\n \\____/\\__,_|_|\\___|\\__,_|_|\\__,_|\\__\\___/|_|   \r\n  \n";

                Console.ForegroundColor = ConsoleColor.Magenta;

                // Title with type writer effect

                for (int i = 0; i < myText.Length; i++)
                {
                    Console.Write(myText[i]);
                    System.Threading.
                        Thread.Sleep(1);
                }

                Console.ResetColor();

                // Check for first number

                while (true)
                {
                    Console.ResetColor();
                    Console.WriteLine("Enter number 1:");
                    if (double.TryParse(Console.ReadLine(), out num1))
                    {
                        break;

                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        Console.WriteLine("Try entering a number.\n");
                    }
                }

                // Check for second number

                while (true)
                {
                    Console.ResetColor();
                    Console.WriteLine("Enter number 2:");
                    if (double.TryParse(Console.ReadLine(), out num2))
                    {
                        break;
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        Console.WriteLine("Try entering a number.\n");
                    }
                }

                // Removing tries and making console presentable

                Console.Clear();
                Presentable(num1, num2);

                // Present operator choices

                Console.WriteLine("\nUse the arrow keys to cycle through options and press enter to select an option");
                int selectedClass = MultipleChoice(true, "\t+ : Add", "\t- : Subtract", "\t* : Multiply", "\t/ : Divide\n"); // Change this to whatever you want

                // Output

                Console.ForegroundColor = ConsoleColor.Green;

                Operators(num1, num2, result, selectedClass);


                Console.ResetColor();


                // Present user if they'd like to do another calculation
                Console.WriteLine("Would you like to continue?");

                int endClass = MultipleChoice2(true, "\tYes", "\tNo", "\tGo to Main Menu\n");
                Ending(x, endClass);
                x = 6;
            } while (x == 6);
        }

        // Guess choices

        public static int GuessChoices(bool canCancel, params string[] options)
        {
            const int startX = 0;
            const int startY = 15;// Change this number to what line you want the options to start
            const int optionsPerLine = 1;
            const int spacingPerLine = 0;

            int currentSelection = 0;

            ConsoleKey key;

            Console.CursorVisible = false;

            do
            {
                for (int i = 0; i < options.Length; i++)
                {
                    Console.SetCursorPosition(startX + (i % optionsPerLine) * spacingPerLine, startY + i / optionsPerLine);

                    if (i == currentSelection)
                        // ForegroundColor = Text | BackgroundColor = Background
                        Console.BackgroundColor = ConsoleColor.Magenta;

                    Console.Write(options[i]);
                    Console.ResetColor();
                }

                key = Console.ReadKey(true).Key;

                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        {
                            if (currentSelection >= optionsPerLine)
                                currentSelection -= optionsPerLine;
                            break;
                        }
                    case ConsoleKey.DownArrow:
                        {
                            if (currentSelection + optionsPerLine < options.Length)
                                currentSelection += optionsPerLine;
                            break;
                        }
                    case ConsoleKey.Enter:
                        {
                            currentSelection += optionsPerLine;
                            break;
                        }
                }
            } while (key != ConsoleKey.Enter);
            Console.CursorVisible = true;
            return currentSelection;
        }

        // Guessing cleanup

        static void GuessClean(int rt, int count)
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Magenta;
            string myText = " _____                       _____                      \r\n|  __ \\                     |  __ \\                     \r\n| |  \\/_   _  ___  ___ ___  | |  \\/ __ _ _ __ ___   ___ \r\n| | __| | | |/ _ \\/ __/ __| | | __ / _` | '_ ` _ \\ / _ \\\r\n| |_\\ \\ |_| |  __/\\__ \\__ \\ | |_\\ \\ (_| | | | | | |  __/\r\n \\____/\\__,_|\\___||___/___/  \\____/\\__,_|_| |_| |_|\\___|\r\n\n";
            Console.WriteLine(myText);
            Console.ResetColor();

            Console.WriteLine("Can you guess the correct number? Hint: It is between 0 - 100.\n");

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"Correct! The number was {rt}.");

            Console.ResetColor();
            Console.WriteLine($"You got the number in {count} guesses.\n");

            Console.ResetColor();
            Console.WriteLine("Do you want to continue?");
        }

        static void Guess()
        {
            int y = 6;
            do
            {
                Console.Clear();
                string myText = " _____                       _____                      \r\n|  __ \\                     |  __ \\                     \r\n| |  \\/_   _  ___  ___ ___  | |  \\/ __ _ _ __ ___   ___ \r\n| | __| | | |/ _ \\/ __/ __| | | __ / _` | '_ ` _ \\ / _ \\\r\n| |_\\ \\ |_| |  __/\\__ \\__ \\ | |_\\ \\ (_| | | | | | |  __/\r\n \\____/\\__,_|\\___||___/___/  \\____/\\__,_|_| |_| |_|\\___|\r\n\n";

                Console.ForegroundColor = ConsoleColor.Magenta;

                for (int i = 0; i < myText.Length; i++)
                {
                    Console.Write(myText[i]);
                    System.Threading.
                        Thread.Sleep(1);
                }
                Console.ResetColor();

                Random random = new Random();

                int rt = random.Next(1, 100);
                int count = 0;

                int guess = 0;

                Console.WriteLine("Can you guess the correct number? Hint: It is between 0 - 100.");

                while (guess != rt)
                {
                    guess = 0;

                Wrong:
                    Console.ResetColor();

                    if (!int.TryParse(Console.ReadLine(), out guess))
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        Console.WriteLine("That's not a number.");
                        continue;
                    }

                    if (guess > 100)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                        Console.WriteLine("Remember, the number is between 0 - 100. Try again.");
                        goto Wrong;
                    }
                    else if (guess < 0)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                        Console.WriteLine("Remember, the number is between 0 - 100. Try again.");
                        goto Wrong;
                    }

                    if (guess < rt)
                    {
                        count += 1;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"Incorrect, the number is higher than {guess}. Try again.");
                    }
                    else if (guess > rt)
                    {
                        count += 1;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"Incorrect, the number is lower than {guess}. Try again.");
                    }
                }
                Console.ForegroundColor = ConsoleColor.Green;

                GuessClean(rt, count);

                int guessChoice = GuessChoices(true, "\tYes | Restart guessing game", "\t No | Exit the program", "\tGo to Main Menu.");

                switch (guessChoice)
                {
                    case 1:
                        // Reset program
                        Guess();
                        return;
                    case 2:
                        // Exit program
                        Console.WriteLine("\nBye!\n");
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("Exiting the program in 5");
                        for (int i = 5; i >= 0; --i)
                        {
                            Console.Write("\b");
                            Console.Write($"{i}");
                            Thread.Sleep(1000);
                        }
                        Environment.Exit(0);
                        return;
                    case 3:
                        MainMenu();
                        return;
                }

                Console.ReadKey();
            } while (y == 6);
        }

        // Quiz

        static void Quiz()
        {

        }

        // Main Menu

        static void MainMenu()
        {
            Console.Clear();
            string myText = "Welcome.\nChoose a program you'd like to use.";

            for (int i = 0; i < myText.Length; i++)
            {
                Console.Write(myText[i]);
                System.Threading.
                    Thread.Sleep(50);
            }

            int choice = StartChoices(true, "\tGuess game", "\tCalculator", "\tQuiz");

            switch (choice)
            {
                case 1:
                    Guess();
                    return;
                case 2:
                    Calculator();
                    return;
                case 3:
                    Quiz();
                    return;
            }

            Console.ReadKey();
        }

        static void Main(string[] args)
        {
            MainMenu();

        }

    }
}
